/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    bool static comp(pair<int, int> a, pair<int, int> b) {
        return a.first < b.first;
    }
private: 
    int swapsRequired(vector<int>& arr) {
        int n = arr.size();
        vector<pair<int, int>> vec;
        for(int i=0;i<n;i++) {
            vec.push_back({arr[i], i});
        }
        sort(vec.begin(), vec.end(), comp);
        int count = 0;
        for(int i=0;i<n;i++) {
            if(vec[i].first != arr[i]) {
                count++;
                swap(vec[i], vec[vec[i].second]);
                --i;
            }
        }
        return count;
    }
public:
    int minimumOperations(TreeNode* root) {
        if(root == NULL) return 0;
        int count = 0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            int size = q.size();
            vector<int> ans;
            for(int i=0;i<size;i++) {
                TreeNode* curr = q.front();
                q.pop();
                ans.push_back(curr -> val);
                if(curr -> left) q.push(curr -> left);
                if(curr -> right) q.push(curr -> right);
            }
            count += swapsRequired(ans);
            ans.clear();
        }
        return count;
    }
};
